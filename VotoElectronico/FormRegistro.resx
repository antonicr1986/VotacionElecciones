<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAPx9AAD8fQAAAAAAAAAA
        AAC4TR0AuE0dALhNHQC4TR0AuE0dAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuE0cALhNHAC4TRwAuE0cALhN
        HAC4TRwAAAAAALhNHAG4TRwAuE0cN7hNHAy4TRwAuE0cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALhNHAC4TRwBuE0cALhN
        HH+4TRwYuE0cALhNHAEAAAAAuE0cAbhNHAC4TRy2uE0cIrhNHAC4TRwBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuE0cALhN
        HAK4TRwAuE0csLhNHDO4TRwAuE0cAgAAAAC4TRwAuE0cA7hNHLi4TRwWuE0cALhNHAG4TRwAt00cALhN
        HAC4TRwAuE0cALhNHAC4TRwAuE0cALhNHAG4TRwBuE0cAbhNHAG4TRwBuE0cALhNHAC4TRwAuE0cALlO
        HgC4TRwAuE0cA7hNHAC4TRyguE0cRrhNHAC4TRwCAAAAALhNHAC4TRwKuE0cu7hNHA64TRwAuE0cBLhN
        HAS4TRwEuE0cBLhNHAO4TRwCuE0cAbdMHQC3TB0AuU4bAAAAAAAAAAAAuVEdALhNHAC4TBwAuE0cALhN
        HAK4TRwDuE0cBLhNHAS4TRwHuE0cALhNHJW4TRxWuE0cALhNHAMAAAAAuE0cALhNHBC4TRy6uE0cB7hN
        HAC4TRwBAAAAAAAAAAAAAAAAxkQhALhNHAC4TRwAuU0cAbhNHAW4TRwJuE0cC7hNHAu4TRwKuE0cB7dN
        HQK3TR0AuE0dALZNHAAAAAAAt00cALhNHAS4TRwAuE0cirhNHGO4TRwAuE0cAwAAAAC4TRwAuE0cFbhN
        HLi4TRwUuE0cNbhNHFm4TRx1uE0ci7hNHJy4TRyouE0csLhNHLW4TRy4uE0cubhNHLq4TRy6uE0curhN
        HLq4TRy6uE0cubhNHLa4TRyxuE0cp7hNHJW4TRx6uE0cWLhNHA24TRyCuE0cbbhNHAC4TRwEAAAAALhN
        HAC4TRwPuE0c3bhNHMG4TRysuE0clbhNHHu4TRxkuE0cUbhNHEC4TRwyuE0cJbhNHBy4TRwUuE0cD7hN
        HAu4TRwKuE0cC7hNHA+4TRwWuE0cILhNHC+4TRxDuE0cW7hNHHi4TRycuE0csLhNHOu4TRxmuE0cALhN
        HAQAAAAAuE0cALhNHBS4TRzBuE0cDrhNHAC4TRwBuE4bAAAAAAAAAAAAAAAAAAAAAAAAAAAAIxX+AAAA
        /wAAAP8AYy/SBIY8jweHPI0HYy/NBAAA/wAAAP8AFxD/AAAAAAAAAAAAuE0cALhNHAO4TRwAuE0cirhN
        HHS4TRwAuE0cBAAAAAC4TRwAuE0cEbhNHLq4TRwGuE0cAbhNHAW3TCABuE0bGbdNHVO3TR57uk4YkbxO
        E56+Tw6kv1ALp8BQCanBUAipwVAIqcFQCKnAUAmqwFALqr9PDam6ThepuE0dnbhNHGC4TRwGuE0cCLhN
        HAC4TRx9uE0ccrhNHAC4TRwEAAAAALhNHAC4TRwKuE0curhNHA+4TRwAuE0cALhNGyK4TR3AuU0Znr1P
        EHOvSjFmnENcYos9g2R+OaFodTa1bHA0wW1uM8dtbTPIbHA0wml2NrNjgjqYXqFFVEi7ThZZt00dg7hN
        HAu4TRwBuE0cALhNHIe4TRxouE0cALhNHAQAAAAAt00cALlNHAC4TRy3uE0cHrhNHAC3TB0Aqkg7B+tf
        AAdCJP8MVCr/qlcr+tVZLPXpWy3x+Vwt7/9dLe3/XS3s/10t6/9eLev/XS3s/10t7fxcLe//WizzrWAv
        7ABhL+sCXi3dALhNHAS4TRwAuE0cl7hNHFW4TRwAuE0cAwAAAAC4TRwDuE0cALhNHKu4TRw7uE0cALhN
        HAWFO5ACWCz4AG0zyBdgL+XwYC7m/2Au5v5gLuf/Xy7n/l8u5/1fLuf8Xy7n/F8u5/xfLuf8Xy7n/F8u
        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
        iJP+hKSV/+SWkv/iTkX/8hai//QWkf/6XyU=
</value>
  </data>
</root>